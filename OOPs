In the real world, we can find many objects around us like cars, buildings, and humans. 
All these objects have some state and behavior. If we consider a car, then its states are name, speed, and fuel, and the behavior is refuel, drive, and park.

Classes are the building blocks of programs built using the object-oriented methodology. Such programs consist of independent self-managing modules and their interactions.

An object is an instance of a module, and a class is its definition.

Fields#
These are also known as the member variables of a class. This is because they contain the information relevant to the object of the class. 
A car object would have a top speed, a certain number of seats, and so many other pieces of data that we could store in variables.

Methods#
This category of attributes enables the class object to perform operations using the fields. 
In the case of the car class, the refuel() function would fill up the fuelCapacity property of the object.

Benefits of using classes#

The concept of classes allows us to create complex objects and applications in Java. This is why classes are the basic building blocks behind all of the OOP’s principles.

Classes are also very useful in compartmentalizing the code of an application. Different components could become separate classes which would interact through interfaces. These ready-made components will also be available for use in future applications.

The use of classes makes it easier to maintain the different parts of an application since it is easier to make changes in classes.

example of a car class

class Car{

//Data members
int speed;
int fuel;
String Manufacturer;

//class methods

void refuel(){.....}

void drive(){....}

void park(){.......}

}



Access Modifiers #
In Java, we can impose access restrictions on different data members and member functions. The restrictions are specified through access modifiers. 
Access modifiers are tags we can associate with each member to define which parts of the program can access it directly.

Private#
A private member cannot be accessed directly from outside the class. The aim is to keep it hidden from the users and other classes. It is a popular practice to keep the data members private since we do not want anyone manipulating our data directly. 
We can make members private using the keyword private.

class Cop {
  
  private int gun; // We have explicitly defined that the variable is private
  // ...
}


Public#
This tag indicates that the members can be directly accessed by anything which is in the same scope as the class object.

Member functions are usually public as they provide the interface through which the application can communicate with our private members.

Public members can be declared using the keyword public.

class Cop{

private int gun;    // this can not be accessed directly out side the class.

public int getGun(){ // this will return gun we can access through this method
    return gun;
}

}

class Main{

public static void main(String[] args){

Cop c = new Cop();
c.getGun(); //this will get the gn feild
c.gun=0;  //this will create the error since gun is private
}
}


Protected#
The protected category is unique. The access level to the protected members lies somewhere between private and public. 
The primary use of the protected tag can be found when using inheritance, which is the process of creating classes out of other classes.

The protected data members can be accessed inside a Java package. However, outside the package, they can only be referred to through an inherited class.


example

package justice;
public class Cop {
  private int gun;
  public int getGun(){
    return gun;  
  }
  protected void fire(){
    System.out.println("shoot!");
  }
}


package crime;  
import justice.*; 

class Thief{  
  public static void main(String args[]){  
   Cop obj = new Cop();  
   obj.fire(); //Compile Time Error  
  }  
} 


The Thief class will throw a compile-time error because it is trying to access the fire() method of the Cop class which is defined in a different package.

Default#
If we do not mention any access modifier, then it is considered to be default access. The default access is similar to the protected. 
It also has package-level access, but it also applies to inherited classes as well, unlike protected. So, you can say that its access is more limited.

Java supports static and non-static fields.

Static field#
A static field resides in a class. All the objects we create will share this field and its value.

class Car {

  // static fields
  static int topSpeed;
  static int maxCapacity;

}
Static fields reside in the class. We don’t need an instance of the class to access static fields. 
We can access the static fields of a class by just writing the class name before the field:

class Car {
    // static fields
    static int topSpeed = 100;
    static int maxCapacity = 4;  
}

class Demo {
    public static void main(String args[]){
    // Static fields are accessible in the main
    System.out.println(Car.topSpeed);
    System.out.println(Car.maxCapacity);   
  }
}
svg viewer

Non-static field
Non-static fields are located in the instances of the class. Each instance of the class can have its own values for these fields.
class Car {
  
  // Non-Static Fields
  int speed;
  int capacity;
}

As non-static fields doesn’t reside in the class, So we need an instance of the class to access non-static fields.
class Car {
    // static fields
    int speed = 100;
    int capacity = 4;  
}

class Demo {
    public static void main(String args[]){
    Car obj1 = new Car();
    System.out.println(obj1.speed);
    System.out.println(obj1.capacity);   
  }
}

Final fields#
A final field cannot have its value changed once it is assigned. We can make a field final by using the keyword final.
class Car {
  // Final field of capacity = 4
  // Now Capacity can nerver be changed from 4
  // to some other value throught the program
  final int capacity = 4;
}
Car class has capacity equals to 4 which can’t be changed. If you try to do so, you will get a compilation error:

can't assign a value to final variable capacity

class Car {
  // Final variable capacity
  final int capacity = 4;
}

class Demo {
   public static void main(String args[]) {
      Car car = new Car();
      car.capacity = 5; // Trying to change the capacity value  will give error
   }
}

The purpose of methods#
Methods act as an interface between a program and the data fields of a class in the program.

These methods can either alter the content of the data fields or use their values to perform a certain computation. All the useful methods should be public, 
although, some methods which do not need to be accessed from the outside could be kept private.

Method overloading#
Overloading refers to making a method perform different operations based on the nature of its arguments.

Methods can be overloaded in Java.

We could redefine a method several times and give it different arguments and method types. When the method is called, the appropriate definition will be selected by the compiler!



  }

}

class Demo {
  
  public static void  main(String args[]) {
    Calculator cal = new Calculator();
    
    double x = 10;
    double y = 20;
    double z = 5;
    
    int a = 12;
    int b = 4;
    
    System.out.println(cal.product(x, y));
    System.out.println(cal.product(x, y, z));
    System.out.println(cal.product(a, b));
  }
  
}

What is a constructor?
As the name suggests, the constructor is used to construct the object of a class. 
It is a special method that outlines the steps that are performed when an instance of a class is created in the program.

A constructor’s name must be exactly the same as the name of its class.

The constructor is a special method because it does not have a return type. We do not even need to write void as the return type. 
It is a good practice to declare/define it as the first member method.

Default constructor#
The default constructor is the most basic form of a constructor. In a default constructor, we define the default values for the data members of the class. 
Hence, the constructor creates an object in which the data members are initialized to their default values.

This will make sense when we look at the code below. Here, we have a Date class, with its default constructor, 
and we’ll create an object out of it in our main():

class Date {

  private int day;
  private int month;
  private int year;


  // Default constructor
  public Date() {
    // We must define the default values for day, month, and year
    day = 0;
    month = 0;
    year = 0;
  }

  // A simple print function
  public void printDate(){ 
    System.out.println("Date: " + day + "/" + month + "/" + year);
  }
  
}

class Demo {
  
  public static void main(String args[]) {
    // Call the Date constructor to create its object;
    Date date = new Date(); // Object created with default values!
    date.printDate();
  }
  
}


The default constructor does not need to be explicitly defined. Even if we don’t create it, 
the JVM will call a default constructor and set data members to null or 0.

If you don’t define any constructor, the Java compiler will insert a default constructor for you. Thus, 
once the class is compiled it will always at least have a no-argument constructor.

Parameterized constructor#
The default constructor isn’t all that impressive. Sure, we could use set methods to set the values for day, month and year ourselves, but this step can be avoided using a parameterized constructor.

In a parameterized constructor, we pass arguments to the constructor and set them as the values of our data members.

We are basically overloading the default constructor to accommodate our preferred values for the data members.

class Date {

  private int day;
  private int month;
  private int year;


  // Default constructor
  public Date() {
    // We must define the default values for day, month, and year
    day = 0;
    month = 0;
    year = 0;
  }

  // Parameterized constructor
  public Date(int d, int m, int y){
    // The arguments are used as values
    day = d;
    month = m;
    year = y;
  }

  // A simple print function
  public void printDate(){ 
    System.out.println("Date: " + day + "/" + month + "/" + year);
  }
}

class Demo {
  
  public static void main(String args[]) {
    // Call the Date constructor to create its object;
    Date date = new Date(1, 8, 2018); // Object created with specified values! // Object created with default values!
    date.printDate();
  }
  
}

In the above code if you are giving a parameterised constructor then JVM will not create a default constructor you have to create it.

this reference variable#
The this reference variable exists for every class. It refers to the class object itself. We use this when we have an argument which has the same name as a data member. 
this.memberName specifies that we are accessing the memberName variable of the particular class.


class Date {

  private int day;
  private int month;
  private int year;


  // Default constructor
  public Date() {
    // We must define the default values for day, month, and year
    this.day = 0;
    this.month = 0;
    this.year = 0;
  }

  // Parameterized constructor
  public Date(int day, int month, int year){
    // The arguments are used as values
    this.day = day;
    this.month = month;
    this.year = year;
  }

  // A simple print function
  public void printDate(){ 
    System.out.println("Date: " + day + "/" + month + "/" + year);
  }
  
}

class Demo {
  
  public static void main(String args[]) {
    // Call the Date constructor to create its object;
    Date date = new Date(1, 8, 2018); // Object created with specified values! // Object created with default values!
    date.printDate();
  }
  
}
#################################################

calling a constructor from a constructor#

class Date {

  private int day;
  private int month;
  private int year;
  private String event;


  // Default constructor
  public Date() {
    // We must define the default values for day, month, and year
    this.day = 0;
    this.month = 0;
    this.year = 0;
  }

  // Parameterized constructor
  public Date(int day, int month, int year){
    // The arguments are used as values
    this.day = day;
    this.month = month;
    this.year = year;
  }
  
  // Parameterized constructor
  public Date(int day, int month, int year, String event){
    this(day, month, year); // calling the constructor
    this.event = event;
  }

  // A simple print function
  public void printDate(){ 
    System.out.println("Date: " + day + "/" + month + "/" + year + "  --> " + event);
  }
  
}

class Demo {
  
  public static void main(String args[]) {
    // Call the Date constructor to create its object;
    Date date = new Date(1, 1, 2019, "New Year"); // Object created with specified values! // Object created with default values!
    date.printDate();
  }
  
}

What is Data Hiding?
In layman’s terms, data hiding refers to the concept of hiding the inner workings of a class and simply providing an interface through which the outside world 
can interact with the class without knowing what’s going on inside.

The purpose is to implement classes in such a way that the instances (objects) of these classes should not be able to cause any 
unauthorized access or change in the original contents of a class. 
One class does not need to know anything about the underlying algorithms of another class. However, the two can still communicate.




